// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Project struct {
	ProjectID  string `json:"projectId"`
	Title      string `json:"title"`
	LastImage  string `json:"lastImage"`
	IsPersonal bool   `json:"isPersonal"`
	UpdatedAt  string `json:"updatedAt"`
}

type ProjectMember struct {
	ProjectID string `json:"projectId"`
	UserID    string `json:"userId"`
	Authority Auth   `json:"authority"`
}

type User struct {
	UserID string `json:"userId"`
	Email  string `json:"email"`
	Name   string `json:"name"`
}

type Auth string

const (
	AuthReadOnly  Auth = "READ_ONLY"
	AuthReadWrite Auth = "READ_WRITE"
	AuthOwner     Auth = "OWNER"
)

var AllAuth = []Auth{
	AuthReadOnly,
	AuthReadWrite,
	AuthOwner,
}

func (e Auth) IsValid() bool {
	switch e {
	case AuthReadOnly, AuthReadWrite, AuthOwner:
		return true
	}
	return false
}

func (e Auth) String() string {
	return string(e)
}

func (e *Auth) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Auth(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Auth", str)
	}
	return nil
}

func (e Auth) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
