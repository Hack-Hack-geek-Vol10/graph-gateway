package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	domain "github.com/Hack-Hack-geek-Vol10/graph-gateway/pkg/grpc"
	"github.com/Hack-Hack-geek-Vol10/graph-gateway/src/graph/model"
	"github.com/Hack-Hack-geek-Vol10/graph-gateway/src/internal"
	"github.com/Hack-Hack-geek-Vol10/graph-gateway/src/middleware"
	"github.com/Hack-Hack-geek-Vol10/graph-gateway/src/services"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user model.NewUser) (*model.User, error) {
	payload := ctx.Value(middleware.TokenKey{}).(*middleware.CustomClaims)

	req := &domain.CreateUserParams{
		Id:    payload.UserId,
		Email: payload.Email,
		Name:  user.Name,
	}

	res, err := services.CreateUser(ctx, req)
	if err != nil {
		return nil, err
	}

	return &model.User{
		UserID: res.Id,
		Name:   res.Name,
		Email:  res.Email,
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	res, err := services.GetOneUser(ctx, userID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		UserID: res.GetId(),
		Name:   res.GetName(),
		Email:  res.GetEmail(),
	}, nil
}

// Mutation returns internal.MutationResolver implementation.
func (r *Resolver) Mutation() internal.MutationResolver { return &mutationResolver{r} }

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
